import{_ as e,c as t,o as a,a as o}from"./app.ab0f998e.js";const f=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[{"level":2,"title":"How it works?","slug":"how-it-works"}],"relativePath":"api/index.md"}'),i={name:"api/index.md"},n=o('<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h1><p>This session details how to use the OctopoJS API.</p><h2 id="how-it-works" tabindex="-1">How it works? <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h2><p>To achieve its goal, the API receives an options object containing the input, processing and output information needed.</p><p>The input is essentially an array of objects. These objects, which are called nodes, are a representation of CSS preprocessor language nodes, it can be a mixin call, a variable declaration, etc. If you wanna generate it easily you can use the <a href="/octopo-js/api/factory.html">factory functions</a>.</p><p>In the middle, the processing options are mainly the grammar, an object with keys assigned to respectively to the node abstractions, which includes, for example, a variable reference.</p><p>Last but not the least, the output, which are options that define weather the string will be printed and/or written to a file.</p><p>For more information about the options, visit the next page.</p>',8),r=[n];function s(c,h,p,d,l,_){return a(),t("div",null,r)}var w=e(i,[["render",s]]);export{f as __pageData,w as default};
