import{_ as e,c as a,o as t,a as n}from"./app.118cfc09.js";const f=JSON.parse('{"title":"Generator","description":"","frontmatter":{},"headers":[{"level":2,"title":"generate(node, lang)","slug":"generate-node-lang","link":"#generate-node-lang","children":[]}],"relativePath":"api/generator.md"}'),r={name:"api/generator.md"},o=n('<h1 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-hidden="true">#</a></h1><h2 id="generate-node-lang" tabindex="-1">generate(node, lang) <a class="header-anchor" href="#generate-node-lang" aria-hidden="true">#</a></h2><p>This function is responsible to generate a string of the node.</p><p>Parameters:</p><ul><li><strong>node</strong>: this is essentially a object. This object, which is called node, is a representation of CSS language nodes, it can be a mixin call, a variable declaration, etc. If you want to generate it easily you can use the <a href="/octopo-js/api/factory.html">factory functions</a>.</li><li><strong>lang</strong>: this is the grammar rules object that will be used for rendering. For more details, check out <a href="/octopo-js/api/grammars.html">Grammars</a>.</li></ul><p>Returns: the string generated from the node and lang.</p>',6),s=[o];function i(l,c,d,g,h,_){return t(),a("div",null,s)}const m=e(r,[["render",i]]);export{f as __pageData,m as default};
