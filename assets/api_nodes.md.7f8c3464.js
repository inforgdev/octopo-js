import{_ as t,c as e,o as d,a as o}from"./app.49a6a09a.js";const x=JSON.parse('{"title":"Nodes","description":"","frontmatter":{},"headers":[],"relativePath":"api/nodes.md"}'),a={name:"api/nodes.md"},r=o('<h1 id="nodes" tabindex="-1">Nodes <a class="header-anchor" href="#nodes" aria-hidden="true">#</a></h1><p>The nodes are objects that respectively represent the nodes in the syntax tree.</p><table><thead><tr><th>Name</th><th>Description</th><th>Example (SCSS)</th><th>Example (LESS)</th></tr></thead><tbody><tr><td>call</td><td>Mixin call</td><td><code>@include example()</code></td><td><code>.example()</code></td></tr><tr><td>arg</td><td>Mixin call argument</td><td><code>10px</code></td><td><code>10px</code></td></tr><tr><td>dec</td><td>Property declaration</td><td><code>color: red;</code></td><td><code>color: red;</code></td></tr><tr><td>var</td><td>Variable declaration</td><td><code>$blue: #00f;</code></td><td><code>@blue: #00f;</code></td></tr><tr><td>val</td><td>Value</td><td><code>10px</code></td><td><code>10px</code></td></tr><tr><td>ref</td><td>Variable reference</td><td><code>$blue</code></td><td><code>@blue</code></td></tr><tr><td>mixin</td><td>Mixin declaration</td><td><code>@mixin example() {}</code></td><td><code>.example() {}</code></td></tr><tr><td>param</td><td>Mixin parameter declaration</td><td><code>$color</code></td><td><code>@color</code></td></tr></tbody></table><p>There are available a lot of factory functions to respective nodes. Similar to it, there are also stringifiers that generate a string from the node.</p>',4),c=[r];function i(n,l,s,p,h,_){return d(),e("div",null,c)}var f=t(a,[["render",i]]);export{x as __pageData,f as default};
